{"version":3,"sources":["pages/Information/index.tsx"],"names":["columns","title","dataIndex","key","width","render","type","color","10","20","30","40","50","PRODUCT_TYPE","text","status","observer","props","userinfo","useContext","stores","loading","openLoading","closeLoading","state","useLocalStore","dataSource","useEffect","query","a","axios","get","params","id","merchantId","account","product","gutter","xs","span","xl","hoverable","bodyStyle","height","marginBottom","bordered","className","overflow","rowKey","expandedRowRender","record","roadList","road","data","i","length","push","size","pagination","expandRowByClick","placement","arrowPointAtCenter","extra","itemLayout","map","el","name","renderItem","item","Item","Meta","avatar","style","backgroundColor","randomColor","href","description"],"mappings":"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","file":"static/js/9.a0a9034a.chunk.js","sourcesContent":["import './style.less'\nimport React, { useContext, useEffect } from 'react'\nimport { RouteComponentProps } from 'react-router-dom'\nimport { Card, Col, Row, Icon, Table, Badge, Tooltip, Tag, List, Avatar, Button } from 'antd'\nimport { observer, useLocalStore } from 'mobx-react-lite'\nimport * as stores from '../../store'\nimport axios from '../../plugins/axios'\nimport { PRODUCT_TYPE } from '../../common/const'\nimport { randomColor } from '../../common/utils'\n\nconst columns = [\n  { title: '产品ID', dataIndex: 'productId', key: 'productId', width: '200px' },\n  {\n    title: '产品类型',\n    dataIndex: 'productType',\n    key: 'productType',\n    render: (type: number) => {\n      return (\n        <div>\n          <Tag\n            color={\n              ({\n                10: 'green',\n                20: 'blue',\n                30: 'cyan',\n                40: 'red',\n                50: 'purple'\n              } as Record<number, string>)[type]\n            }\n          >\n            {PRODUCT_TYPE[type]}\n          </Tag>\n        </div>\n      )\n    }\n  },\n  {\n    title: '总状态',\n    dataIndex: 'status',\n    key: 'status',\n    width: '200px',\n    render(text: string) {\n      return text ? (\n        <Badge status=\"processing\" text=\"已开启\" />\n      ) : (\n        <Badge status=\"error\" text=\"已关闭\" />\n      )\n    }\n  }\n]\n\ninterface IProps extends RouteComponentProps {}\ninterface IState {\n  dataSource: any\n}\n\nconst Information: React.FC<IProps> = props => {\n  const { userinfo } = useContext(stores.userStore)\n  const { loading, openLoading, closeLoading } = useContext(stores.uiStore)\n  const state = useLocalStore(\n    () =>\n      ({\n        dataSource: {}\n      } as IState)\n  )\n\n  useEffect(() => {\n    query()\n    // eslint-disable-next-line\n  }, [])\n  // 查询数据\n  const query = async () => {\n    openLoading()\n    state.dataSource = await axios.get('merchant/getMerchantInfo', {\n      params: {\n        id: userinfo.merchantId\n      }\n    })\n    closeLoading()\n  }\n  // 渲染table展开内容的方法\n  const expandedRowRender = (record: any) => {\n    const columns = [\n      {\n        title: '商户编号',\n        dataIndex: 'roadCode',\n        key: 'roadCode',\n        width: '200px'\n      },\n      { title: '商户名称', dataIndex: 'name', key: 'name' },\n      {\n        title: '状态',\n        dataIndex: 'status',\n        key: 'status',\n        width: '200px',\n        render(text: string) {\n          return text ? (\n            <Badge status=\"processing\" text=\"已开启\" />\n          ) : (\n            <Badge status=\"error\" text=\"已关闭\" />\n          )\n        }\n      }\n    ]\n\n    const roadList = record.road\n    const data = []\n    for (let i = 0; i < roadList.length; ++i) {\n      data.push(roadList[i])\n    }\n    return (\n      <Table\n        rowKey=\"roadCode\"\n        size=\"middle\"\n        columns={columns}\n        dataSource={data}\n        pagination={false}\n      />\n    )\n  }\n\n  let { account = [], product = [] } = state.dataSource\n\n  return (\n    <div>\n      <Row gutter={24}>\n        <Col xs={{ span: 24 }} xl={{ span: 12 }}>\n          <Card\n            hoverable\n            bodyStyle={{ height: '260px', marginBottom: '24px' }}\n            title=\"合作商信息\"\n            bordered={false}\n            loading={loading}\n          >\n            <p>\n              <span className=\"label\">合作商编号：</span>\n              <span className=\"value\">2018032610021</span>\n            </p>\n            <p>\n              <span className=\"label\">合作商名称：</span>\n              <span className=\"value\">阿里巴巴</span>\n            </p>\n            <p>\n              <span className=\"label\">联系人：</span>\n              <span className=\"value\">马云</span>\n            </p>\n            <p>\n              <span className=\"label\">联系电话：</span>\n              <span className=\"value\">10086</span>\n            </p>\n          </Card>\n        </Col>\n        <Col xs={{ span: 24 }} xl={{ span: 12 }}>\n          <Card\n            hoverable\n            bodyStyle={{ height: '260px', marginBottom: '24px' }}\n            title=\"结算卡信息\"\n            bordered={false}\n            loading={loading}\n          >\n            <p>\n              <span className=\"label\">持卡人：</span>\n              <span className=\"value\">马化腾</span>\n            </p>\n            <p>\n              <span className=\"label\">身份证：</span>\n              <span className=\"value\">110</span>\n            </p>\n            <p>\n              <span className=\"label\">银行卡：</span>\n              <span className=\"value\">119</span>\n            </p>\n            <p>\n              <span className=\"label\">银行：</span>\n              <span className=\"value\">杭州银行</span>\n            </p>\n            <p>\n              <span className=\"label\">支行：</span>\n              <span className=\"value\">西城支行</span>\n            </p>\n            <p>\n              <span className=\"label\">预留手机号：</span>\n              <span className=\"value\">120</span>\n            </p>\n          </Card>\n        </Col>\n      </Row>\n      <Row gutter={24}>\n        <Col xs={{ span: 24 }} xl={{ span: 16 }}>\n          <Card\n            hoverable\n            className=\"product-list\"\n            bodyStyle={{ marginBottom: '24px', overflow: 'auto' }}\n            title=\"产品列表\"\n            bordered={false}\n            loading={loading}\n          >\n            <Table\n              rowKey=\"productId\"\n              columns={columns}\n              expandedRowRender={expandedRowRender}\n              dataSource={product}\n              pagination={false}\n              size=\"middle\"\n              expandRowByClick={true}\n            />\n          </Card>\n        </Col>\n        <Col xs={{ span: 24 }} xl={{ span: 8 }}>\n          <Card\n            hoverable\n            bodyStyle={{ marginBottom: '24px', overflow: 'auto' }}\n            title={\n              <div>\n                <span>账号</span>\n                &nbsp;\n                <Tooltip placement=\"topLeft\" title=\"开通合作商下商户账号\" arrowPointAtCenter>\n                  <Icon type=\"question-circle-o\" />\n                </Tooltip>\n              </div>\n            }\n            extra={<Button type=\"link\">新建</Button>}\n            bordered={false}\n            loading={loading}\n            className=\"account\"\n          >\n            <List\n              itemLayout=\"horizontal\"\n              dataSource={account.map((el: any) => {\n                return {\n                  name: el.name,\n                  account: el.account\n                }\n              })}\n              renderItem={(item: any) => (\n                <List.Item>\n                  <List.Item.Meta\n                    avatar={\n                      <Avatar\n                        style={{\n                          backgroundColor: randomColor()\n                        }}\n                      >\n                        {item.name}\n                      </Avatar>\n                    }\n                    title={<a href=\"/\">{item.name}</a>}\n                    description={item.account}\n                  />\n                </List.Item>\n              )}\n            />\n          </Card>\n        </Col>\n      </Row>\n    </div>\n  )\n}\n\nexport default observer(Information)\n"],"sourceRoot":""}